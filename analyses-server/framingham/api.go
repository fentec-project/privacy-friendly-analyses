/*
 * Copyright (c) 2019 XLAB d.o.o
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package framingham

import (
	"encoding/json"
	"fmt"
	"math"
	"math/big"
	"net/http"

	"github.com/fentec-project/gofe/data"
	"github.com/fentec-project/gofe/innerprod/fullysec"
	"github.com/fentec-project/private-predictions/serialization"
	"github.com/go-chi/chi"
	"github.com/go-chi/render"
)

func Routes() *chi.Mux {
	router := chi.NewRouter()
	router.Post("/30", Risk30)
	return router
}

// Risk30 takes encrypted vector x which contains user's information about
// sex, age, systolic blood pressure, total cholesterol, HDL cholesterol,
// smoker info, whether blood pressure was treated, diabetic info.
func Risk30(w http.ResponseWriter, r *http.Request) {
	ciphertext := new(data.Vector)
	err := json.NewDecoder(r.Body).Decode(&ciphertext)
	if err != nil {
		panic(err)
	}

	y1Key := new(big.Int)
	err = serialization.ReadGob("framingham30-FE-y1-key.gob", y1Key)
	if err != nil {
		fmt.Errorf("Error during key reading: %v", err)
	}

	y2Key := new(big.Int)
	err = serialization.ReadGob("framingham30-FE-y2-key.gob", y2Key)
	if err != nil {
		fmt.Errorf("Error during key reading: %v", err)
	}

	// paillier.gob generated by key-server needs to be used
	params := new(fullysec.PaillierParams)
	err = serialization.ReadGob("paillier.gob", params)
	if err != nil {
		fmt.Errorf("Error during Paillier params reading: %v", err)
	}
	paillier := fullysec.NewPaillierFromParams(params)

	r2 := big.NewInt(34362)
	r3 := big.NewInt(263588)
	r4 := big.NewInt(188030)
	r5 := big.NewInt(112673)
	r6 := big.NewInt(-90941)
	r7 := big.NewInt(59397)
	r8 := big.NewInt(52320)
	r9 := big.NewInt(68602)
	y1 := data.NewVector([]*big.Int{r2, r3, r4, r5, r6, r7, r8, r9})

	t2 := big.NewInt(48123)
	t3 := big.NewInt(339222)
	t4 := big.NewInt(139862)
	t5 := big.NewInt(-439)
	t6 := big.NewInt(16081)
	t7 := big.NewInt(99858)
	t8 := big.NewInt(19035)
	t9 := big.NewInt(49756)
	y2 := data.NewVector([]*big.Int{t2, t3, t4, t5, t6, t7, t8, t9})

	xy1, err := paillier.Decrypt(*ciphertext, y1Key, y1)
	if err != nil {
		fmt.Errorf("Error during decryption")
	}

	xy2, err := paillier.Decrypt(*ciphertext, y2Key, y2)
	if err != nil {
		fmt.Errorf("Error during decryption")
	}

	var factor float64
	factor = 100000

	xy1Actual := float64(xy1.Int64())
	xy1Actual = xy1Actual / (factor * factor)

	xy2Actual := float64(xy2.Int64())
	xy2Actual = xy2Actual / (factor * factor)

	w2 := 21.29326612
	w5 := math.Exp(xy1Actual - w2)

	x2 := 20.12840698
	x5 := math.Exp(xy2Actual - x2)

	F := make([]float64, 1340)
	G := make([]float64, 1340)
	K := make([]float64, 1340)
	M := make([]float64, 1340)

	for i := 0; i < len(E); i++ {
		F[i] = math.Pow(E[i], w5)
	}

	for i := 0; i+1 < len(E); i++ {
		G[i] = math.Log(E[i]) - math.Log(E[i+1])
	}

	for i := 0; i < len(K); i++ {
		K[i] = math.Pow(J[i], x5)
	}

	M[0] = w5 * (-math.Log(E[0]))
	for i := 0; i+1 < len(M); i++ {
		M[i+1] = F[i] * K[i] * w5 * G[i]
	}

	var fullRisk = 0.0
	for i := 0; i < len(M); i++ {
		fullRisk = fullRisk + M[i]
	}

	risk := math.Round(100.0 * fullRisk)

	fmt.Println("risk:")
	fmt.Println(risk)

	render.JSON(w, r, risk)
}
