/*
 * Copyright (c) 2019 XLAB d.o.o
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"math"
	"math/big"
	"net/http"

	"github.com/fentec-project/gofe/data"
	"github.com/fentec-project/gofe/innerprod/fullysec"
	"github.com/fentec-project/private-predictions/serialization"
)

func main() {
	var age, systolicBP, totalCh, hdlCh, factor float64
	factor = 100000
	factorInt := 100000

	age = 43
	systolicBP = 120 // systolic blood pressure
	totalCh = 180    // total cholesterol
	hdlCh = 66       // HDL cholesterol
	ageLog := math.Log(age)
	systolicBPLog := math.Log(systolicBP)
	totalChLog := math.Log(totalCh)
	hdlChLog := math.Log(hdlCh)

	ageLog *= factor
	systolicBPLog *= factor
	totalChLog *= factor
	hdlChLog *= factor

	isMale := 1
	smoker := 0
	treatedBP := 0 // treated blood pressure
	diabetic := 0

	ageInt := big.NewInt(int64(math.Round(ageLog)))
	systolicBPInt := big.NewInt(int64(math.Round(systolicBPLog)))
	totalChInt := big.NewInt(int64(math.Round(totalChLog)))
	hdlChInt := big.NewInt(int64(math.Round(hdlChLog)))

	isMaleInt := big.NewInt(int64(isMale * factorInt))
	smokerInt := big.NewInt(int64(smoker * factorInt))
	treatedBPInt := big.NewInt(int64(treatedBP * factorInt))
	diabeticInt := big.NewInt(int64(diabetic * factorInt))

	x := data.NewVector([]*big.Int{isMaleInt, ageInt, systolicBPInt, totalChInt, hdlChInt, smokerInt,
		treatedBPInt, diabeticInt})

	// paillier.gob generated by key-server needs to be used
	params := new(fullysec.PaillierParams)
	err := serialization.ReadGob("paillier.gob", params)
	if err != nil {
		fmt.Errorf("Error during Paillier params reading: %v", err)
	}
	paillier := fullysec.NewPaillierFromParams(params)

	masterPubKey := new(data.Vector)
	err = serialization.ReadGob("pubKey.gob", masterPubKey)
	if err != nil {
		fmt.Errorf("Error during key reading: %v", err)
	}

	ciphertext, err := paillier.Encrypt(x, *masterPubKey)
	if err != nil {
		fmt.Errorf("Error during encryption: %v", err)
	}

	jsonValue, _ := json.Marshal(ciphertext)
	response, err := http.Post("http://localhost:8081/v1/api/framingham/30",
		"application/json", bytes.NewBuffer(jsonValue))
	if err != nil {
		fmt.Printf("The HTTP request failed with error %s\n", err)
	}

	resp, err := ioutil.ReadAll(response.Body)

	fmt.Println("Risk (%):")
	fmt.Println(string(resp))

}
